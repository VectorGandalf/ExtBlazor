@page "/gridserver"
@using ExtBlazor.Core
@using ExtBlazor.Core.Server
@using ExtBlazor.Demo.Client.Models
@using ExtBlazor.Demo.Client.Pages.Components
@using ExtBlazor.Demo.Client.Services
@using ExtBlazor.Demo.Database
@using ExtBlazor.Grid
@using ExtBlazor.Paginators
@inject IStashService stash
@inject ExDbContext db
@rendermode InteractiveServer
<h1>Grid demo server with DdContext</h1>
<p>
    Simple grid demo.
</p>
<div class="input-group w-50">
    <input @bind=search class="form-control" @bind:event="oninput" @onkeydown=Enter>
    <button class="btn btn-primary" @onclick=Search>Search</button>
</div>
<Grid Items="items"
      OnColumnEvent="args => HandleColumnEvent(args)"
      CssClass="table table-striped w-100"
      RowCssClass=@(i => i.Admin ? "admin" : null)
      Sort="sort ?? []">
    <Column Property="u => u.Id" />
    <Column Property="u => u.Name" Href=@(u => "/users/" + u.Id) />
    <Column Property="u => u.Username" />
    <Column Property="u => u.Email" Title="E-Mail" Href=@(u => "mailto:" + u.Email) />
    <Column Property="u => u.Phone" Format=Formaters.FormatPhoneNumber />
    <Column Property="u => u.Created" Format=Formaters.FormatDate />
    <Column Property="u => u.LastLogin" Title="Last login" Format=Formaters.FormatDateTime Sortable="false" />
</Grid>
<SimplePagination Pagination="pagination" Padding="5" NavCssClass="pagination" ActiveCssClass="active" ButtonCssClass="page-item page-link" SelectCssClass="form-select w-auto me-5" />
@code
{
    private IEnumerable<User> items = [];

    private string? search;
    private Pagination pagination = new() { Take = 10 };
    private IEnumerable<SortExpression> sort = [];

    protected override async Task OnInitializedAsync()
    {
        if (stash.HasValue("stash"))
        {
            (pagination, sort, search) = stash.Get<(Pagination, IEnumerable<SortExpression>, string)>("stash");
        }

        pagination.OnNavigation = async () => await UpdateItems();
        await UpdateItems();

        await base.OnInitializedAsync();
    }

    private void Search()
    {
        pagination.SetPage(1);
    }

    private void HandleColumnEvent(IColumnEventArgs args)
    {
        if (args is ColumnSortEventArgs sortArgs)
        {
            sort = sortArgs.SortExpressions;
            pagination.SetPage(1);
        }
    }

    private void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            Search();
        }
    }

    private async Task UpdateItems()
    {
        var queryable = db.Users.AsQueryable();
        var tokens = search?.Split(' ') ?? [];

        foreach (var token in tokens)
        {
            queryable = queryable.Where(user =>
                user.Name.ToLower().Contains(token.ToLower()) ||
                user.Phone.ToLower().Contains(token.ToLower()) ||
                user.Email.ToLower().Contains(token.ToLower()) ||
                user.Username.ToLower().Contains(token.ToLower()));
        }

        var page = await queryable.PageAsync(
            sort, 
            pagination.Skip, 
            pagination.Take);

        if(page is not null)
        {
            pagination.TotalCount = page.Total;
            items = page.Items;
            StateHasChanged(); 
        }

        stash.Put("stash", (pagination, sort, search));
    }
}