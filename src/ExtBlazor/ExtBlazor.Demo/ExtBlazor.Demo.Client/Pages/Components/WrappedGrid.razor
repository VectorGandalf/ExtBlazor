@using ExtBlazor.Core
@using ExtBlazor.Paginators
@using ExtBlazor.RemoteMediator
@inject IRemoteMediator mediator
@attribute [CascadingTypeParameter(nameof(TItem))]
@typeparam TItem

<div class="d-flex justify-content-between">
    <span>
        Page: @(pagination.CurrentPage)/@(pagination.Pages)
    </span>
    <span>
        Page size:
        <select @bind=pagination.Take class="form-select w-auto">
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="20">20</option>
            <option value="50">50</option>
            <option value="100">100</option>
        </select>
    </span>
</div>
<Grid Items="items" OnColumnEvent=OnColumnEvent CssClass="table table-striped w-100" DefaultHeadTempate="typeof(CustomHeadTemplate)" RowCssClass=RowCssClass Sort="@Query.Sort">
    @ChildContent
</Grid>

<nav>
    <div class="d-flex justify-content-center">
        <button role="navigation" type="button" class="btn btn-link" @onclick="pagination.First">&#171;</button>
        <button role="navigation" type="button" class="btn btn-link" @onclick="pagination.Previous">&#8249;</button>
        <button role="navigation" type="button" class="btn btn-link" @onclick="pagination.Next">&#8250;</button>
        <button role="navigation" type="button" class="btn btn-link" @onclick="pagination.Last">&#187;</button>
    </div>
</nav>
@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter, EditorRequired]
    public required IDemoPageQuery<TItem> Query { get; set; }

    [Parameter]
    public Func<TItem, string?> RowCssClass { get; set; } = item => null;

    private Grid<TItem>? grid;

    private IEnumerable<TItem> items = [];

    private bool loading;

    private Pagination pagination = new()
        {
            Take = 10,
            Skip = 0,
            TotalCount = 0
        };

    protected override void OnInitialized()
    {
        pagination.Skip = Query.Skip ?? 0;
        pagination.Take = Query.Take ?? 10;
        pagination.OnNavigation = async () => await UpdateItems();

        if (!(grid?.Sort ?? []).Any())
        {
            pagination.SetPage(1);
        }

        base.OnInitialized();
    }

    private void OnColumnEvent(IColumnEventArgs args)
    {
        if (args is ColumnSortEventArgs sortArgs)
        {
            Query.Sort = sortArgs.SortExpressions;
            pagination.SetPage(1);
        }
    }

    private async Task UpdateItems()
    {
        try
        {
            loading = true;
            StateHasChanged();

            Query.Skip = pagination.Skip;
            Query.Take = pagination.Take;

            var pagedSet = await mediator.Send(Query);
            if (pagedSet != null)
            {
                pagination.TotalCount = pagedSet.Total;
                items = pagedSet.Items;
            }
            else
            {
                pagination.TotalCount = 0;
                items = [];
            }
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    public async Task Update()
    {
        pagination.SetPage(1);
        await UpdateItems();
    }
}
