@using ExtBlazor.Core
@using ExtBlazor.Paginators
@using ExtBlazor.RemoteMediator
@inject IRemoteMediator mediator
<h2>Grid demo 1</h2>
<p>
    Simple grid demo.
</p>
<div class="input-group w-50">
    <input @bind=query.Search class="form-control" @bind:event="oninput" @onkeydown=Enter>
    <button class="btn btn-primary" @onclick=Search>Search</button>
</div>
<Grid Items="items"
      OnColumnEvent="args => HandleColumnEvent(args)"
      CssClass="table table-striped w-100"
      RowCssClass=@(i => i.Admin ? "admin" : null)
      @ref=grid>
    <Column Property="u => u.Id" />
    <Column Property="u => u.Name" Href=@(u => "/users/" + u.Id) />
    <Column Property="u => u.Username" />
    <Column Property="u => u.Email" Title="E-Mail" Href=@(u => "mailto:" + u.Email) />
    <Column Property="u => u.Phone" Format=Formaters.FormatPhoneNumber />
    <Column Property="u => u.Created" Format=Formaters.FormatDate />
    <Column Property="u => u.LastLogin" Title="Last login" Format=Formaters.FormatDateTime Sortable="false" />
</Grid>
<SimplePagination Pagination="pagination" Padding="5" NavCssClass="pagination" ActiveCssClass="active" ButtonCssClass="page-item page-link" SelectCssClass="form-select w-auto me-5" />
@code
{
    private Grid<User>? grid;
    private IEnumerable<User> items = [];

    private Pagination pagination = new()
        {
            Take = 10,
            Skip = 0,
            TotalCount = 0
        };

    private GetUsersQuery query = new();

    protected override void OnInitialized()
    {
        pagination.OnNavigation = async () => await UpdateItems();
        pagination.SetPage(1);
        base.OnInitialized();
    }

    private void Search()
    {
        pagination.SetPage(1);
    }

    private void HandleColumnEvent(IColumnEventArgs args)
    {
        if (args is ColumnSortEventArgs sortArgs)
        {
            query.Sort = sortArgs.SortExpressions;
            pagination.SetPage(1);
        }
    }

    private void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            Search();
        }
    }

    private async Task UpdateItems()
    {
        query.Skip = pagination.Skip;
        query.Take = pagination.Take;

        var page = await mediator.Send(query);
        if (page != null)
        {
            pagination.TotalCount = page.Total;
            items = page.Items;
            StateHasChanged();
        }
    }
}
