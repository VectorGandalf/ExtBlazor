@using ExtBlazor.Core
@using ExtBlazor.Paginators
@inject HttpClient httpClient
<h2>Grid demo 1</h2>
<p>
    Simple grid demo.
</p>
<div class="input-group w-50">
    <input @bind=query.Search class="form-control" @bind:event="oninput" @onkeydown=Enter>
    <button class="btn btn-primary" @onclick=Search>Search</button>
</div>
<Grid Items="items" OnColumnEvent="args => HandleColumnEvent(args)" CssClass="table table-striped w-100">
    <PropertyColumn Property="u => u.Id" />
    <PropertyColumn Property="u => u.Name" />
    <PropertyColumn Property="u => u.Username" />
    <PropertyColumn Property="u => u.Email" Title="E-Mail" />
    <PropertyColumn Property="u => u.Phone" Format="@(u => u.Insert(3, " (0) ").Insert(11, "-").Insert(14, " ").Insert(17, " "))" />
    <PropertyColumn Property="u => u.Created" Format="@(u => u.ToString("yyyy-MM-dd"))" />
    <PropertyColumn Property="u => u.LastLogin" Title="Last login" Format="@(u => u?.ToString("yyyy-MM-dd HH:mm"))" />
</Grid>
<SimplePagination Pagination="pagination" Padding="5" NavCssClass="pagination" ActiveCssClass="active" ButtonCssClass="page-item page-link" SelectCssClass="form-select w-auto me-5" />
@code
{
    private IEnumerable<User> items = [];

    private Pagination pagination = new()
        {
            Take = 10,
            Skip = 0,
            TotalCount = 0
        };

    private GetUsersQuery query = new()
        {
        };

    protected override void OnInitialized()
    {
        pagination.OnNavigation = async () => await UpdateItems();
        pagination.SetPage(1);
        base.OnInitialized();
    }

    private void Search()
    {        
        pagination.SetPage(1);
    }

    private void HandleColumnEvent(IColumnEventArgs args)
    {
        if (args is ColumnSortEventArgs sortArgs)
        {
            bool Asc = sortArgs.Ascending ?? true;

            query.Sort = (sortArgs.SortExpression ?? "") + (Asc ? " asc" : " desc");

            pagination.SetPage(1);
        }
    }
    
    private void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            Search();
        }
    }

    private async Task UpdateItems()
    {
        query.Skip = pagination.Skip;
        query.Take = pagination.Take;

        var url = $"api/users" + query.ToQueryString();
        var pagedSet = await httpClient.GetFromJsonAsync<Page<User>>(url);
        if (pagedSet != null)
        {
            pagination.TotalCount = pagedSet.Total;
            items = pagedSet.Items;
            StateHasChanged();
        }
    }
}
